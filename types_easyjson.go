// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGeekband(in *jlexer.Lexer, out *UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = int(in.Int())
		case "type":
			out.Type = int(in.Int())
		case "cellphone":
			out.Cellphone = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "nickname":
			out.Nickname = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "gender":
			out.Gender = string(in.String())
		case "birthday":
			out.Birthday = string(in.String())
		case "graduation":
			out.Graduation = string(in.String())
		case "profession":
			out.Profession = string(in.String())
		case "industry":
			out.Industry = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "mobile":
			out.Mobile = string(in.String())
		case "contact":
			out.Contact = string(in.String())
		case "position":
			out.Position = string(in.String())
		case "passworded":
			out.Passworded = bool(in.Bool())
		case "create_time":
			out.CreateTime = int64(in.Int64())
		case "oss_token":
			out.OssToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband(out *jwriter.Writer, in UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"cellphone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cellphone))
	}
	{
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"nickname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"gender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Gender))
	}
	{
		const prefix string = ",\"birthday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Birthday))
	}
	{
		const prefix string = ",\"graduation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Graduation))
	}
	{
		const prefix string = ",\"profession\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Profession))
	}
	{
		const prefix string = ",\"industry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Industry))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mobile))
	}
	{
		const prefix string = ",\"contact\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Contact))
	}
	{
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"passworded\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Passworded))
	}
	{
		const prefix string = ",\"create_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CreateTime))
	}
	{
		const prefix string = ",\"oss_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OssToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband(l, v)
}
func easyjson6601e8cdDecodeGeekband1(in *jlexer.Lexer, out *Reply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "comment_id":
			out.CommentID = int(in.Int())
		case "content":
			out.Content = string(in.String())
		case "utype":
			out.Utype = int(in.Int())
		case "id":
			out.ID = string(in.String())
		case "user_name":
			out.UserName = string(in.String())
		case "user_name_real":
			out.UserNameReal = string(in.String())
		case "ctime":
			out.Ctime = int64(in.Int64())
		case "uid":
			out.UID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband1(out *jwriter.Writer, in Reply) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"comment_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CommentID))
	}
	{
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"utype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Utype))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"user_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"user_name_real\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserNameReal))
	}
	{
		const prefix string = ",\"ctime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ctime))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband1(l, v)
}
func easyjson6601e8cdDecodeGeekband2(in *jlexer.Lexer, out *ProductsData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "page":
			(out.Page).UnmarshalEasyJSON(in)
		case "title":
			out.Title = string(in.String())
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]*ColumnItem, 0, 8)
					} else {
						out.List = []*ColumnItem{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ColumnItem
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ColumnItem)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.List = append(out.List, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband2(out *jwriter.Writer, in ProductsData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Page).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.List {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductsData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductsData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductsData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductsData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband2(l, v)
}
func easyjson6601e8cdDecodeGeekband3(in *jlexer.Lexer, out *Page) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "more":
			out.More = bool(in.Bool())
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband3(out *jwriter.Writer, in Page) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"more\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.More))
	}
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Page) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Page) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Page) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Page) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband3(l, v)
}
func easyjson6601e8cdDecodeGeekband4(in *jlexer.Lexer, out *MyProductsResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				in.Delim('[')
				if out.Error == nil {
					if !in.IsDelim(']') {
						out.Error = make([]interface{}, 0, 4)
					} else {
						out.Error = []interface{}{}
					}
				} else {
					out.Error = (out.Error)[:0]
				}
				for !in.IsDelim(']') {
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					out.Error = append(out.Error, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*ProductsData, 0, 8)
					} else {
						out.Data = []*ProductsData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *ProductsData
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(ProductsData)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "code":
			out.Code = int(in.Int())
		case "extra":
			if in.IsNull() {
				in.Skip()
				out.Extra = nil
			} else {
				in.Delim('[')
				if out.Extra == nil {
					if !in.IsDelim(']') {
						out.Extra = make([]interface{}, 0, 4)
					} else {
						out.Extra = []interface{}{}
					}
				} else {
					out.Extra = (out.Extra)[:0]
				}
				for !in.IsDelim(']') {
					var v6 interface{}
					if m, ok := v6.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v6.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v6 = in.Interface()
					}
					out.Extra = append(out.Extra, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband4(out *jwriter.Writer, in MyProductsResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Error == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Error {
				if v7 > 0 {
					out.RawByte(',')
				}
				if m, ok := v8.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v8.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v8))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Data {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"extra\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Extra == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Extra {
				if v11 > 0 {
					out.RawByte(',')
				}
				if m, ok := v12.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v12.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v12))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MyProductsResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MyProductsResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MyProductsResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MyProductsResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband4(l, v)
}
func easyjson6601e8cdDecodeGeekband5(in *jlexer.Lexer, out *LoginResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(UserInfo)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				in.Delim('[')
				if out.Error == nil {
					if !in.IsDelim(']') {
						out.Error = make([]interface{}, 0, 4)
					} else {
						out.Error = []interface{}{}
					}
				} else {
					out.Error = (out.Error)[:0]
				}
				for !in.IsDelim(']') {
					var v13 interface{}
					if m, ok := v13.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v13.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v13 = in.Interface()
					}
					out.Error = append(out.Error, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "extra":
			easyjson6601e8cdDecode(in, &out.Extra)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband5(out *jwriter.Writer, in LoginResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Data == nil {
			out.RawString("null")
		} else {
			(*in.Data).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Error == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Error {
				if v14 > 0 {
					out.RawByte(',')
				}
				if m, ok := v15.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v15.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v15))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"extra\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode(out, in.Extra)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband5(l, v)
}
func easyjson6601e8cdDecode(in *jlexer.Lexer, out *struct {
	Cost      float64 `json:"cost"`
	RequestID string  `json:"request-id"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cost":
			out.Cost = float64(in.Float64())
		case "request-id":
			out.RequestID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode(out *jwriter.Writer, in struct {
	Cost      float64 `json:"cost"`
	RequestID string  `json:"request-id"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Cost))
	}
	{
		const prefix string = ",\"request-id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGeekband6(in *jlexer.Lexer, out *LoginParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "country":
			out.Country = int(in.Int())
		case "cellphone":
			out.Cellphone = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "captcha":
			out.Captcha = string(in.String())
		case "remember":
			out.Remember = int(in.Int())
		case "platform":
			out.Platform = int(in.Int())
		case "appid":
			out.Appid = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband6(out *jwriter.Writer, in LoginParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Country))
	}
	{
		const prefix string = ",\"cellphone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cellphone))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"captcha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Captcha))
	}
	{
		const prefix string = ",\"remember\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Remember))
	}
	{
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Platform))
	}
	{
		const prefix string = ",\"appid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Appid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband6(l, v)
}
func easyjson6601e8cdDecodeGeekband7(in *jlexer.Lexer, out *ID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband7(out *jwriter.Writer, in ID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband7(l, v)
}
func easyjson6601e8cdDecodeGeekband8(in *jlexer.Lexer, out *CommentsResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				in.Delim('[')
				if out.Error == nil {
					if !in.IsDelim(']') {
						out.Error = make([]interface{}, 0, 4)
					} else {
						out.Error = []interface{}{}
					}
				} else {
					out.Error = (out.Error)[:0]
				}
				for !in.IsDelim(']') {
					var v16 interface{}
					if m, ok := v16.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v16.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v16 = in.Interface()
					}
					out.Error = append(out.Error, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "code":
			out.Code = int(in.Int())
		case "extra":
			if in.IsNull() {
				in.Skip()
				out.Extra = nil
			} else {
				in.Delim('[')
				if out.Extra == nil {
					if !in.IsDelim(']') {
						out.Extra = make([]interface{}, 0, 4)
					} else {
						out.Extra = []interface{}{}
					}
				} else {
					out.Extra = (out.Extra)[:0]
				}
				for !in.IsDelim(']') {
					var v17 interface{}
					if m, ok := v17.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v17.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v17 = in.Interface()
					}
					out.Extra = append(out.Extra, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband8(out *jwriter.Writer, in CommentsResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Error == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Error {
				if v18 > 0 {
					out.RawByte(',')
				}
				if m, ok := v19.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v19.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v19))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"extra\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Extra == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Extra {
				if v20 > 0 {
					out.RawByte(',')
				}
				if m, ok := v21.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v21.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v21))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentsResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentsResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentsResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentsResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband8(l, v)
}
func easyjson6601e8cdDecodeGeekband9(in *jlexer.Lexer, out *CommentsParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aid":
			out.Aid = string(in.String())
		case "prev":
			out.Prev = string(in.String())
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband9(out *jwriter.Writer, in CommentsParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"aid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Aid))
	}
	{
		const prefix string = ",\"prev\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prev))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentsParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentsParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentsParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentsParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband9(l, v)
}
func easyjson6601e8cdDecodeGeekband10(in *jlexer.Lexer, out *CommentList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]*Comment, 0, 8)
					} else {
						out.List = []*Comment{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *Comment
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(Comment)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.List = append(out.List, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			(out.Page).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband10(out *jwriter.Writer, in CommentList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.List {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Page).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband10(l, v)
}
func easyjson6601e8cdDecodeGeekband11(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_header":
			out.UserHeader = string(in.String())
		case "user_name":
			out.UserName = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "like_count":
			out.LikeCount = int(in.Int())
		case "comment_is_top":
			out.CommentIsTop = bool(in.Bool())
		case "had_liked":
			out.HadLiked = bool(in.Bool())
		case "comment_ctime":
			out.CommentCtime = int64(in.Int64())
		case "comment_content":
			out.CommentContent = string(in.String())
		case "score":
			out.Score = string(in.String())
		case "replies":
			if in.IsNull() {
				in.Skip()
				out.Replies = nil
			} else {
				in.Delim('[')
				if out.Replies == nil {
					if !in.IsDelim(']') {
						out.Replies = make([]*Reply, 0, 8)
					} else {
						out.Replies = []*Reply{}
					}
				} else {
					out.Replies = (out.Replies)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *Reply
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(Reply)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					out.Replies = append(out.Replies, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband11(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_header\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserHeader))
	}
	{
		const prefix string = ",\"user_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"like_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LikeCount))
	}
	{
		const prefix string = ",\"comment_is_top\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CommentIsTop))
	}
	{
		const prefix string = ",\"had_liked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HadLiked))
	}
	{
		const prefix string = ",\"comment_ctime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CommentCtime))
	}
	{
		const prefix string = ",\"comment_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommentContent))
	}
	{
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Score))
	}
	if len(in.Replies) != 0 {
		const prefix string = ",\"replies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Replies {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					(*v27).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband11(l, v)
}
func easyjson6601e8cdDecodeGeekband12(in *jlexer.Lexer, out *ColumnItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "extra":
			if in.IsNull() {
				in.Skip()
				out.Extra = nil
			} else {
				if out.Extra == nil {
					out.Extra = new(ColumnInfo)
				}
				(*out.Extra).UnmarshalEasyJSON(in)
			}
		case "type":
			out.Type = string(in.String())
		case "cover":
			out.Cover = string(in.String())
		case "score":
			out.Score = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband12(out *jwriter.Writer, in ColumnItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"extra\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Extra == nil {
			out.RawString("null")
		} else {
			(*in.Extra).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"cover\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cover))
	}
	{
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Score))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ColumnItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ColumnItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ColumnItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ColumnItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband12(l, v)
}
func easyjson6601e8cdDecodeGeekband13(in *jlexer.Lexer, out *ColumnInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "update_frequency":
			out.UpdateFrequency = string(in.String())
		case "article_count":
			out.ArticleCount = int(in.Int())
		case "view_article_count":
			out.ViewArticleCount = int(in.Int())
		case "author_intro":
			out.AuthorIntro = string(in.String())
		case "score":
			out.Score = int64(in.Int64())
		case "column_id":
			out.ColumnID = int(in.Int())
		case "had_sub":
			out.HadSub = bool(in.Bool())
		case "column_type":
			out.ColumnType = int(in.Int())
		case "author_header":
			out.AuthorHeader = string(in.String())
		case "column_subtitle":
			out.ColumnSubtitle = string(in.String())
		case "column_sku":
			out.ColumnSku = int(in.Int())
		case "column_title":
			out.ColumnTitle = string(in.String())
		case "column_cover":
			out.ColumnCover = string(in.String())
		case "is_include_audio":
			out.IsIncludeAudio = bool(in.Bool())
		case "sub_time":
			out.SubTime = int(in.Int())
		case "author_name":
			out.AuthorName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband13(out *jwriter.Writer, in ColumnInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"update_frequency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UpdateFrequency))
	}
	{
		const prefix string = ",\"article_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ArticleCount))
	}
	{
		const prefix string = ",\"view_article_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ViewArticleCount))
	}
	{
		const prefix string = ",\"author_intro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthorIntro))
	}
	{
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Score))
	}
	{
		const prefix string = ",\"column_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ColumnID))
	}
	{
		const prefix string = ",\"had_sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HadSub))
	}
	{
		const prefix string = ",\"column_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ColumnType))
	}
	{
		const prefix string = ",\"author_header\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthorHeader))
	}
	{
		const prefix string = ",\"column_subtitle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ColumnSubtitle))
	}
	{
		const prefix string = ",\"column_sku\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ColumnSku))
	}
	{
		const prefix string = ",\"column_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ColumnTitle))
	}
	{
		const prefix string = ",\"column_cover\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ColumnCover))
	}
	{
		const prefix string = ",\"is_include_audio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsIncludeAudio))
	}
	{
		const prefix string = ",\"sub_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SubTime))
	}
	{
		const prefix string = ",\"author_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthorName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ColumnInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ColumnInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ColumnInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ColumnInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband13(l, v)
}
func easyjson6601e8cdDecodeGeekband14(in *jlexer.Lexer, out *AudioTimeArr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "m":
			out.M = string(in.String())
		case "s":
			out.S = string(in.String())
		case "h":
			out.H = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband14(out *jwriter.Writer, in AudioTimeArr) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"m\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.M))
	}
	{
		const prefix string = ",\"s\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.S))
	}
	{
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.H))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AudioTimeArr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AudioTimeArr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AudioTimeArr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AudioTimeArr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband14(l, v)
}
func easyjson6601e8cdDecodeGeekband15(in *jlexer.Lexer, out *ArticlesResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				in.Delim('[')
				if out.Error == nil {
					if !in.IsDelim(']') {
						out.Error = make([]interface{}, 0, 4)
					} else {
						out.Error = []interface{}{}
					}
				} else {
					out.Error = (out.Error)[:0]
				}
				for !in.IsDelim(']') {
					var v28 interface{}
					if m, ok := v28.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v28.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v28 = in.Interface()
					}
					out.Error = append(out.Error, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(ArticlesList)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "code":
			out.Code = int(in.Int())
		case "extra":
			if in.IsNull() {
				in.Skip()
				out.Extra = nil
			} else {
				in.Delim('[')
				if out.Extra == nil {
					if !in.IsDelim(']') {
						out.Extra = make([]interface{}, 0, 4)
					} else {
						out.Extra = []interface{}{}
					}
				} else {
					out.Extra = (out.Extra)[:0]
				}
				for !in.IsDelim(']') {
					var v29 interface{}
					if m, ok := v29.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v29.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v29 = in.Interface()
					}
					out.Extra = append(out.Extra, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband15(out *jwriter.Writer, in ArticlesResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Error == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.Error {
				if v30 > 0 {
					out.RawByte(',')
				}
				if m, ok := v31.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v31.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v31))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Data == nil {
			out.RawString("null")
		} else {
			(*in.Data).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"extra\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Extra == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Extra {
				if v32 > 0 {
					out.RawByte(',')
				}
				if m, ok := v33.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v33.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v33))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArticlesResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArticlesResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArticlesResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArticlesResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband15(l, v)
}
func easyjson6601e8cdDecodeGeekband16(in *jlexer.Lexer, out *ArticlesParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cid":
			out.Cid = string(in.String())
		case "size":
			out.Size = int(in.Int())
		case "prev":
			out.Prev = int64(in.Int64())
		case "order":
			out.Order = string(in.String())
		case "sample":
			out.Sample = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband16(out *jwriter.Writer, in ArticlesParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cid))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"prev\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Prev))
	}
	{
		const prefix string = ",\"order\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Order))
	}
	{
		const prefix string = ",\"sample\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Sample))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArticlesParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArticlesParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArticlesParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArticlesParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband16(l, v)
}
func easyjson6601e8cdDecodeGeekband17(in *jlexer.Lexer, out *ArticlesList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]*ArticleItem, 0, 8)
					} else {
						out.List = []*ArticleItem{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *ArticleItem
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(ArticleItem)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					out.List = append(out.List, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			(out.Page).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband17(out *jwriter.Writer, in ArticlesList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.List {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil {
					out.RawString("null")
				} else {
					(*v36).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Page).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArticlesList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArticlesList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArticlesList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArticlesList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband17(l, v)
}
func easyjson6601e8cdDecodeGeekband18(in *jlexer.Lexer, out *ArticleItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "article_subtitle":
			out.ArticleSubtitle = string(in.String())
		case "article_ctime":
			out.ArticleCtime = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "article_cover":
			out.ArticleCover = string(in.String())
		case "article_title":
			out.ArticleTitle = string(in.String())
		case "article_summary":
			out.ArticleSummary = string(in.String())
		case "had_viewed":
			out.HadViewed = bool(in.Bool())
		case "article_could_preview":
			out.ArticleCouldPreview = bool(in.Bool())
		case "chapter_id":
			out.ChapterID = string(in.String())
		case "score":
			out.Score = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband18(out *jwriter.Writer, in ArticleItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"article_subtitle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArticleSubtitle))
	}
	{
		const prefix string = ",\"article_ctime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ArticleCtime))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"article_cover\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArticleCover))
	}
	{
		const prefix string = ",\"article_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArticleTitle))
	}
	{
		const prefix string = ",\"article_summary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArticleSummary))
	}
	{
		const prefix string = ",\"had_viewed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HadViewed))
	}
	{
		const prefix string = ",\"article_could_preview\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ArticleCouldPreview))
	}
	{
		const prefix string = ",\"chapter_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChapterID))
	}
	{
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Score))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArticleItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArticleItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArticleItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArticleItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband18(l, v)
}
func easyjson6601e8cdDecodeGeekband19(in *jlexer.Lexer, out *ArticleInfoResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				in.Delim('[')
				if out.Error == nil {
					if !in.IsDelim(']') {
						out.Error = make([]interface{}, 0, 4)
					} else {
						out.Error = []interface{}{}
					}
				} else {
					out.Error = (out.Error)[:0]
				}
				for !in.IsDelim(']') {
					var v37 interface{}
					if m, ok := v37.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v37.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v37 = in.Interface()
					}
					out.Error = append(out.Error, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(ArticleInfo)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "code":
			out.Code = int(in.Int())
		case "extra":
			if in.IsNull() {
				in.Skip()
				out.Extra = nil
			} else {
				in.Delim('[')
				if out.Extra == nil {
					if !in.IsDelim(']') {
						out.Extra = make([]interface{}, 0, 4)
					} else {
						out.Extra = []interface{}{}
					}
				} else {
					out.Extra = (out.Extra)[:0]
				}
				for !in.IsDelim(']') {
					var v38 interface{}
					if m, ok := v38.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v38.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v38 = in.Interface()
					}
					out.Extra = append(out.Extra, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband19(out *jwriter.Writer, in ArticleInfoResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Error == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.Error {
				if v39 > 0 {
					out.RawByte(',')
				}
				if m, ok := v40.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v40.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v40))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Data == nil {
			out.RawString("null")
		} else {
			(*in.Data).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"extra\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Extra == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Extra {
				if v41 > 0 {
					out.RawByte(',')
				}
				if m, ok := v42.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v42.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v42))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArticleInfoResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArticleInfoResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArticleInfoResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArticleInfoResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband19(l, v)
}
func easyjson6601e8cdDecodeGeekband20(in *jlexer.Lexer, out *ArticleInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "article_subtitle":
			out.ArticleSubtitle = string(in.String())
		case "sku":
			out.Sku = string(in.String())
		case "column_had_sub":
			out.ColumnHadSub = bool(in.Bool())
		case "audio_title":
			out.AudioTitle = string(in.String())
		case "view_count":
			out.ViewCount = int(in.Int())
		case "video_cover":
			out.VideoCover = string(in.String())
		case "audio_download_url":
			out.AudioDownloadURL = string(in.String())
		case "audio_time":
			out.AudioTime = string(in.String())
		case "video_media":
			out.VideoMedia = string(in.String())
		case "product_type":
			out.ProductType = string(in.String())
		case "article_content":
			out.ArticleContent = string(in.String())
		case "like_count":
			out.LikeCount = int(in.Int())
		case "video_height":
			out.VideoHeight = int(in.Int())
		case "article_title":
			out.ArticleTitle = string(in.String())
		case "audio_size":
			out.AudioSize = int(in.Int())
		case "article_sharetitle":
			out.ArticleSharetitle = string(in.String())
		case "author_name":
			out.AuthorName = string(in.String())
		case "article_ctime":
			out.ArticleCtime = int64(in.Int64())
		case "id":
			out.ID = int(in.Int())
		case "article_cover":
			out.ArticleCover = string(in.String())
		case "audio_url":
			out.AudioURL = string(in.String())
		case "video_size":
			out.VideoSize = int(in.Int())
		case "chapter_id":
			out.ChapterID = string(in.String())
		case "had_liked":
			out.HadLiked = bool(in.Bool())
		case "column_is_experience":
			out.ColumnIsExperience = bool(in.Bool())
		case "had_viewed":
			out.HadViewed = bool(in.Bool())
		case "score":
			out.Score = string(in.String())
		case "column_bgcolor":
			out.ColumnBgcolor = string(in.String())
		case "column_cover":
			out.ColumnCover = string(in.String())
		case "video_time":
			out.VideoTime = string(in.String())
		case "audio_md5":
			out.AudioMd5 = string(in.String())
		case "audio_time_arr":
			(out.AudioTimeArr).UnmarshalEasyJSON(in)
		case "cid":
			out.Cid = int(in.Int())
		case "article_cover_hidden":
			out.ArticleCoverHidden = bool(in.Bool())
		case "article_summary":
			out.ArticleSummary = string(in.String())
		case "article_could_preview":
			out.ArticleCouldPreview = bool(in.Bool())
		case "audio_dubber":
			out.AudioDubber = string(in.String())
		case "video_width":
			out.VideoWidth = int(in.Int())
		case "column_id":
			out.ColumnID = int(in.Int())
		case "article_poster_wxlite":
			out.ArticlePosterWxlite = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGeekband20(out *jwriter.Writer, in ArticleInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"article_subtitle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArticleSubtitle))
	}
	{
		const prefix string = ",\"sku\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sku))
	}
	{
		const prefix string = ",\"column_had_sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ColumnHadSub))
	}
	{
		const prefix string = ",\"audio_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AudioTitle))
	}
	{
		const prefix string = ",\"view_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ViewCount))
	}
	{
		const prefix string = ",\"video_cover\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VideoCover))
	}
	{
		const prefix string = ",\"audio_download_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AudioDownloadURL))
	}
	{
		const prefix string = ",\"audio_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AudioTime))
	}
	{
		const prefix string = ",\"video_media\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VideoMedia))
	}
	{
		const prefix string = ",\"product_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProductType))
	}
	{
		const prefix string = ",\"article_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArticleContent))
	}
	{
		const prefix string = ",\"like_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LikeCount))
	}
	{
		const prefix string = ",\"video_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoHeight))
	}
	{
		const prefix string = ",\"article_title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArticleTitle))
	}
	{
		const prefix string = ",\"audio_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AudioSize))
	}
	{
		const prefix string = ",\"article_sharetitle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArticleSharetitle))
	}
	{
		const prefix string = ",\"author_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthorName))
	}
	{
		const prefix string = ",\"article_ctime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ArticleCtime))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"article_cover\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArticleCover))
	}
	{
		const prefix string = ",\"audio_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AudioURL))
	}
	{
		const prefix string = ",\"video_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoSize))
	}
	{
		const prefix string = ",\"chapter_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChapterID))
	}
	{
		const prefix string = ",\"had_liked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HadLiked))
	}
	{
		const prefix string = ",\"column_is_experience\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ColumnIsExperience))
	}
	{
		const prefix string = ",\"had_viewed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HadViewed))
	}
	{
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Score))
	}
	{
		const prefix string = ",\"column_bgcolor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ColumnBgcolor))
	}
	{
		const prefix string = ",\"column_cover\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ColumnCover))
	}
	{
		const prefix string = ",\"video_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VideoTime))
	}
	{
		const prefix string = ",\"audio_md5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AudioMd5))
	}
	{
		const prefix string = ",\"audio_time_arr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.AudioTimeArr).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cid))
	}
	{
		const prefix string = ",\"article_cover_hidden\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ArticleCoverHidden))
	}
	{
		const prefix string = ",\"article_summary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArticleSummary))
	}
	{
		const prefix string = ",\"article_could_preview\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ArticleCouldPreview))
	}
	{
		const prefix string = ",\"audio_dubber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AudioDubber))
	}
	{
		const prefix string = ",\"video_width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoWidth))
	}
	{
		const prefix string = ",\"column_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ColumnID))
	}
	{
		const prefix string = ",\"article_poster_wxlite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArticlePosterWxlite))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArticleInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGeekband20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArticleInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGeekband20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArticleInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGeekband20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArticleInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGeekband20(l, v)
}
